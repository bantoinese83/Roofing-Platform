name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays
    - cron: '0 0 * * 0'

jobs:
  # Backend Security Scan
  backend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Bandit security scan
      uses: shundor/python-bandit-scan@master
      with:
        path: backend
        exit_zero: true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --full-report

  # Frontend Security Scan
  frontend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'frontend/trivy-results.sarif'

  # Container Security Scan
  container-security:
    runs-on: ubuntu-latest
    needs: [backend-security, frontend-security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build backend image for scanning
      run: |
        docker build -f infrastructure/docker/backend.Dockerfile -t roofing-platform-backend:scan .

    - name: Scan backend image
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        scan-ref: 'roofing-platform-backend:scan'
        format: 'sarif'
        output: 'backend-scan-results.sarif'

    - name: Build frontend image for scanning
      run: |
        docker build -f infrastructure/docker/frontend.Dockerfile -t roofing-platform-frontend:scan .

    - name: Scan frontend image
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        scan-ref: 'roofing-platform-frontend:scan'
        format: 'sarif'
        output: 'frontend-scan-results.sarif'

    - name: Upload scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          backend-scan-results.sarif
          frontend-scan-results.sarif

  # Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update backend dependencies
      uses: pyupio/pyup@master
      with:
        requirements: backend/requirements.txt
        branch: dependabot/backend/requirements

    - name: Update frontend dependencies
      uses: dependabot/dependabot-core@master
      with:
        package-manager: npm
        directory: frontend
        branch: dependabot/frontend/package

  # SAST (Static Application Security Testing)
  sast:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Secret Scanning
  secret-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
