# Generated by Django 4.2.24 on 2025-09-13 00:22

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("jobs", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="InventoryCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Category name", max_length=100, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Category description"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this category is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent_category",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent category for hierarchical organization",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="inventory.inventorycategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory Category",
                "verbose_name_plural": "Inventory Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="InventoryItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Item name/description", max_length=200),
                ),
                (
                    "sku",
                    models.CharField(
                        help_text="Stock Keeping Unit - unique identifier",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Detailed description"),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("each", "Each"),
                            ("sq_ft", "Square Feet"),
                            ("linear_ft", "Linear Feet"),
                            ("lb", "Pounds"),
                            ("kg", "Kilograms"),
                            ("gal", "Gallons"),
                            ("liter", "Liters"),
                            ("box", "Box"),
                            ("roll", "Roll"),
                            ("bundle", "Bundle"),
                            ("sheet", "Sheet"),
                            ("panel", "Panel"),
                            ("bag", "Bag"),
                            ("can", "Can"),
                        ],
                        default="each",
                        help_text="Unit of measurement",
                        max_length=20,
                    ),
                ),
                (
                    "current_stock",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Current stock quantity",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "minimum_stock",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Minimum stock level before reorder",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "maximum_stock",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Maximum stock level",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "reorder_point",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Point at which to reorder",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "unit_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Cost per unit",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "selling_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Selling price per unit",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("discontinued", "Discontinued"),
                            ("out_of_stock", "Out of Stock"),
                        ],
                        default="active",
                        help_text="Item status",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active"
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Storage location", max_length=200
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True, help_text="Barcode for item", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        help_text="Item category",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="items",
                        to="inventory.inventorycategory",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_inventory_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory Item",
                "verbose_name_plural": "Inventory Items",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Supplier company name", max_length=200),
                ),
                (
                    "contact_person",
                    models.CharField(
                        blank=True, help_text="Primary contact person", max_length=100
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="Supplier email", max_length=254
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, help_text="Supplier phone number", max_length=20
                    ),
                ),
                ("address", models.TextField(blank=True, help_text="Supplier address")),
                ("website", models.URLField(blank=True, help_text="Supplier website")),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about supplier"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this supplier is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Supplier",
                "verbose_name_plural": "Suppliers",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "po_number",
                    models.CharField(
                        blank=True,
                        help_text="Purchase order number",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("sent", "Sent to Supplier"),
                            ("confirmed", "Confirmed"),
                            ("partially_received", "Partially Received"),
                            ("received", "Received"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        help_text="Purchase order status",
                        max_length=20,
                    ),
                ),
                (
                    "order_date",
                    models.DateField(
                        auto_now_add=True, help_text="Date order was placed"
                    ),
                ),
                (
                    "expected_delivery_date",
                    models.DateField(
                        blank=True, help_text="Expected delivery date", null=True
                    ),
                ),
                (
                    "actual_delivery_date",
                    models.DateField(
                        blank=True, help_text="Actual delivery date", null=True
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Subtotal before tax",
                        max_digits=10,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Tax amount",
                        max_digits=8,
                    ),
                ),
                (
                    "shipping_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Shipping/freight cost",
                        max_digits=8,
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total order amount",
                        max_digits=10,
                    ),
                ),
                ("notes", models.TextField(blank=True, help_text="Order notes")),
                (
                    "tracking_number",
                    models.CharField(
                        blank=True, help_text="Shipping tracking number", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who approved this order",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_purchase_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this order",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_purchase_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        help_text="Supplier for this purchase order",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchase_orders",
                        to="inventory.supplier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Purchase Order",
                "verbose_name_plural": "Purchase Orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ItemSupplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "supplier_sku",
                    models.CharField(
                        blank=True,
                        help_text="SKU used by this supplier",
                        max_length=100,
                    ),
                ),
                (
                    "supplier_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Price from this supplier",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "minimum_order_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        help_text="Minimum quantity to order from this supplier",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "lead_time_days",
                    models.PositiveIntegerField(
                        default=7, help_text="Lead time in days for delivery"
                    ),
                ),
                (
                    "is_preferred",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the preferred supplier",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes about this supplier relationship"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supplier_relationships",
                        to="inventory.inventoryitem",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="item_relationships",
                        to="inventory.supplier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Item Supplier",
                "verbose_name_plural": "Item Suppliers",
                "ordering": ["-is_preferred", "supplier_price"],
            },
        ),
        migrations.AddField(
            model_name="inventoryitem",
            name="suppliers",
            field=models.ManyToManyField(
                help_text="Suppliers for this item",
                related_name="supplied_items",
                through="inventory.ItemSupplier",
                to="inventory.supplier",
            ),
        ),
        migrations.CreateModel(
            name="StockTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("purchase", "Purchase"),
                            ("sale", "Sale"),
                            ("adjustment", "Adjustment"),
                            ("transfer", "Transfer"),
                            ("return", "Return"),
                            ("count", "Stock Count"),
                            ("waste", "Waste/Damage"),
                        ],
                        help_text="Type of transaction",
                        max_length=20,
                    ),
                ),
                (
                    "quantity_change",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Change in quantity (positive for increase, negative for decrease)",
                        max_digits=8,
                    ),
                ),
                (
                    "new_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Stock quantity after this transaction",
                        max_digits=10,
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        blank=True, help_text="Reason for transaction", max_length=200
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True,
                        help_text="Reference number (PO, invoice, etc.)",
                        max_length=100,
                    ),
                ),
                ("notes", models.TextField(blank=True, help_text="Additional notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "item",
                    models.ForeignKey(
                        help_text="Item involved in transaction",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="inventory.inventoryitem",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        help_text="User who performed this transaction",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inventory_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_job",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related job if applicable",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inventory_transactions",
                        to="jobs.job",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related supplier if applicable",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transactions",
                        to="inventory.supplier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stock Transaction",
                "verbose_name_plural": "Stock Transactions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["item", "created_at"],
                        name="inventory_s_item_id_987ed8_idx",
                    ),
                    models.Index(
                        fields=["transaction_type", "created_at"],
                        name="inventory_s_transac_fce13a_idx",
                    ),
                    models.Index(
                        fields=["performed_by", "created_at"],
                        name="inventory_s_perform_00a9e7_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity_ordered",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Quantity ordered",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "quantity_received",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Quantity actually received",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Unit price",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "line_total",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total for this line item",
                        max_digits=8,
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Notes for this item"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "inventory_item",
                    models.ForeignKey(
                        help_text="Inventory item being ordered",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchase_order_items",
                        to="inventory.inventoryitem",
                    ),
                ),
                (
                    "purchase_order",
                    models.ForeignKey(
                        help_text="Purchase order this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="inventory.purchaseorder",
                    ),
                ),
            ],
            options={
                "verbose_name": "Purchase Order Item",
                "verbose_name_plural": "Purchase Order Items",
                "ordering": ["created_at"],
                "unique_together": {("purchase_order", "inventory_item")},
            },
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["supplier", "status"], name="inventory_p_supplie_80088d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["po_number"], name="inventory_p_po_numb_319f55_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["order_date"], name="inventory_p_order_d_472534_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="itemsupplier",
            unique_together={("item", "supplier")},
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["sku"], name="inventory_i_sku_e27286_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(
                fields=["category", "status"], name="inventory_i_categor_878bff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(
                fields=["is_active", "current_stock"],
                name="inventory_i_is_acti_7b8265_idx",
            ),
        ),
    ]
