# Generated by Django 4.2.24 on 2025-09-13 00:22

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("technicians", "0001_initial"),
        ("customers", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "job_number",
                    models.CharField(
                        blank=True,
                        help_text="Unique job number (auto-generated)",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief title describing the job", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the work to be done",
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("repair", "Repair"),
                            ("replacement", "Replacement"),
                            ("inspection", "Inspection"),
                            ("maintenance", "Maintenance"),
                            ("emergency", "Emergency"),
                            ("other", "Other"),
                        ],
                        default="repair",
                        help_text="Type of roofing job",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("scheduled", "Scheduled"),
                            ("dispatched", "Dispatched"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("on_hold", "On Hold"),
                        ],
                        default="new",
                        help_text="Current status of the job",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        help_text="Priority level of the job",
                        max_length=20,
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the job is scheduled",
                        null=True,
                    ),
                ),
                (
                    "scheduled_time",
                    models.TimeField(
                        blank=True,
                        help_text="Time when the job is scheduled to start",
                        null=True,
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Estimated duration in hours",
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.1"))
                        ],
                    ),
                ),
                (
                    "actual_start_time",
                    models.DateTimeField(
                        blank=True, help_text="Actual time the job started", null=True
                    ),
                ),
                (
                    "actual_end_time",
                    models.DateTimeField(
                        blank=True, help_text="Actual time the job ended", null=True
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Job address (can be different from customer address)",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="GPS latitude for mapping",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="GPS longitude for mapping",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "required_materials",
                    models.JSONField(
                        blank=True,
                        help_text="List of required materials with quantities",
                        null=True,
                    ),
                ),
                (
                    "special_instructions",
                    models.TextField(
                        blank=True, help_text="Special instructions for the job"
                    ),
                ),
                (
                    "customer_notes",
                    models.TextField(blank=True, help_text="Notes visible to customer"),
                ),
                (
                    "internal_notes",
                    models.TextField(
                        blank=True, help_text="Internal notes not visible to customer"
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated cost of the job",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost of the job",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Job completion percentage (0-100)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "quality_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        help_text="Quality rating (1-5 stars)",
                        null=True,
                    ),
                ),
                (
                    "customer_feedback",
                    models.TextField(
                        blank=True, help_text="Customer feedback after job completion"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_crew",
                    models.ForeignKey(
                        blank=True,
                        help_text="Crew assigned to this job",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_jobs",
                        to="technicians.crew",
                    ),
                ),
                (
                    "assigned_technicians",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Individual technicians assigned to this job",
                        related_name="assigned_jobs",
                        to="technicians.technicianprofile",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this job",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="Customer this job belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="customers.customer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Job",
                "verbose_name_plural": "Jobs",
                "ordering": ["-scheduled_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="JobDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document",
                    models.FileField(
                        help_text="Document file", upload_to="job_documents/"
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("estimate", "Estimate"),
                            ("contract", "Contract"),
                            ("permit", "Permit"),
                            ("invoice", "Invoice"),
                            ("warranty", "Warranty"),
                            ("other", "Other"),
                        ],
                        default="other",
                        help_text="Type of document",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(help_text="Document title", max_length=200)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Optional description"),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "job",
                    models.ForeignKey(
                        help_text="Job this document belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="jobs.job",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded this document",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_job_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Job Document",
                "verbose_name_plural": "Job Documents",
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="JobStatusUpdate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "old_status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("scheduled", "Scheduled"),
                            ("dispatched", "Dispatched"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("on_hold", "On Hold"),
                        ],
                        help_text="Previous job status",
                        max_length=20,
                    ),
                ),
                (
                    "new_status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("scheduled", "Scheduled"),
                            ("dispatched", "Dispatched"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("on_hold", "On Hold"),
                        ],
                        help_text="New job status",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes about the status change"
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="GPS latitude where status was updated",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="GPS longitude where status was updated",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        help_text="Job this update belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_updates",
                        to="jobs.job",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        help_text="User who made this status update",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="job_status_updates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Job Status Update",
                "verbose_name_plural": "Job Status Updates",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="JobPhoto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(help_text="Photo file", upload_to="job_photos/"),
                ),
                (
                    "photo_type",
                    models.CharField(
                        choices=[
                            ("before", "Before Work"),
                            ("during", "During Work"),
                            ("after", "After Work"),
                            ("damage", "Damage Documentation"),
                            ("other", "Other"),
                        ],
                        default="other",
                        help_text="Type of photo",
                        max_length=20,
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Optional caption for the photo",
                        max_length=200,
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="GPS latitude where photo was taken",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="GPS longitude where photo was taken",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        help_text="Job this photo belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photos",
                        to="jobs.job",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded this photo",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_job_photos",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Job Photo",
                "verbose_name_plural": "Job Photos",
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="JobNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "note_type",
                    models.CharField(
                        choices=[
                            ("note", "Internal Note"),
                            ("chat", "Chat Message"),
                            ("system", "System Message"),
                            ("status_change", "Status Change"),
                        ],
                        default="note",
                        help_text="Type of note/message",
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Content of the note or message"),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("all", "All Users"),
                            ("office", "Office Staff Only"),
                            ("technicians", "Technicians Only"),
                            ("private", "Private Note"),
                        ],
                        default="all",
                        help_text="Who can see this note",
                        max_length=20,
                    ),
                ),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="Optional file attachment",
                        null=True,
                        upload_to="job_notes/",
                    ),
                ),
                (
                    "attachment_name",
                    models.CharField(
                        blank=True,
                        help_text="Original filename of attachment",
                        max_length=255,
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this note is pinned to the top",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this note",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="job_notes_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        help_text="Job this note belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="jobs.job",
                    ),
                ),
                (
                    "parent_note",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent note for threaded conversations",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="replies",
                        to="jobs.jobnote",
                    ),
                ),
                (
                    "read_by",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users who have read this note",
                        related_name="read_job_notes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Job Note",
                "verbose_name_plural": "Job Notes",
                "ordering": ["-is_pinned", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="JobHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "history_type",
                    models.CharField(
                        choices=[
                            ("created", "Job Created"),
                            ("updated", "Field Updated"),
                            ("status_changed", "Status Changed"),
                            ("assigned", "Assignment Changed"),
                            ("photo_added", "Photo Added"),
                            ("photo_removed", "Photo Removed"),
                            ("document_added", "Document Added"),
                            ("document_removed", "Document Removed"),
                            ("note_added", "Note Added"),
                            ("notification_sent", "Notification Sent"),
                        ],
                        help_text="Type of change that occurred",
                        max_length=30,
                    ),
                ),
                (
                    "field_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the field that was changed (if applicable)",
                        max_length=100,
                    ),
                ),
                (
                    "old_value",
                    models.TextField(
                        blank=True, help_text="Previous value of the field"
                    ),
                ),
                (
                    "new_value",
                    models.TextField(blank=True, help_text="New value of the field"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Human-readable description of the change"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of the user who made the change",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent string of the browser/device"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "changed_by",
                    models.ForeignKey(
                        help_text="User who made this change",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="job_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        help_text="Job this history entry belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="jobs.job",
                    ),
                ),
                (
                    "related_document",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related document (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="history_entries",
                        to="jobs.jobdocument",
                    ),
                ),
                (
                    "related_note",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related note (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="history_entries",
                        to="jobs.jobnote",
                    ),
                ),
                (
                    "related_photo",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related photo (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="history_entries",
                        to="jobs.jobphoto",
                    ),
                ),
            ],
            options={
                "verbose_name": "Job History",
                "verbose_name_plural": "Job History",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="jobnote",
            index=models.Index(
                fields=["job", "created_at"], name="jobs_jobnot_job_id_48ab68_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="jobnote",
            index=models.Index(
                fields=["job", "visibility"], name="jobs_jobnot_job_id_691aed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="jobnote",
            index=models.Index(
                fields=["created_by", "created_at"],
                name="jobs_jobnot_created_6ca0f1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="jobnote",
            index=models.Index(
                fields=["parent_note"], name="jobs_jobnot_parent__b1853a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="jobhistory",
            index=models.Index(
                fields=["job", "created_at"], name="jobs_jobhis_job_id_40764a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="jobhistory",
            index=models.Index(
                fields=["history_type", "created_at"],
                name="jobs_jobhis_history_5c00cf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="jobhistory",
            index=models.Index(
                fields=["changed_by", "created_at"],
                name="jobs_jobhis_changed_d44d59_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["customer", "status"], name="jobs_job_custome_522329_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["scheduled_date", "status"], name="jobs_job_schedul_3f8cb5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["assigned_crew", "status"], name="jobs_job_assigne_1b5e30_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["job_number"], name="jobs_job_job_num_b42e46_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["created_at"], name="jobs_job_created_1b3a4d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(
                fields=["status", "priority"], name="jobs_job_status_007c84_idx"
            ),
        ),
    ]
