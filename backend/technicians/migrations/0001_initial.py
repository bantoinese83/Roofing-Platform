# Generated by Django 4.2.24 on 2025-09-13 00:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("roofing", "Roofing"),
                            ("siding", "Siding"),
                            ("gutters", "Gutters"),
                            ("insulation", "Insulation"),
                            ("general", "General Construction"),
                            ("other", "Other"),
                        ],
                        default="roofing",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="TechnicianProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "employee_id",
                    models.CharField(
                        blank=True,
                        help_text="Employee identification number",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Hourly pay rate in dollars",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of emergency contact",
                        max_length=100,
                    ),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(
                        blank=True,
                        help_text="Phone number of emergency contact",
                        max_length=20,
                    ),
                ),
                (
                    "license_number",
                    models.CharField(
                        blank=True,
                        help_text="Professional license number",
                        max_length=50,
                    ),
                ),
                (
                    "license_expiry",
                    models.DateField(
                        blank=True, help_text="License expiration date", null=True
                    ),
                ),
                (
                    "max_daily_hours",
                    models.PositiveIntegerField(
                        default=8, help_text="Maximum hours technician can work per day"
                    ),
                ),
                (
                    "preferred_start_time",
                    models.TimeField(
                        blank=True, help_text="Preferred daily start time", null=True
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True,
                        help_text="Whether technician is currently available for work",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="America/New_York",
                        help_text="Technician timezone",
                        max_length=50,
                    ),
                ),
                (
                    "working_days",
                    models.JSONField(
                        default=list,
                        help_text="List of working days (0=Monday, 6=Sunday)",
                    ),
                ),
                (
                    "default_start_time",
                    models.TimeField(
                        default="09:00:00", help_text="Default work start time"
                    ),
                ),
                (
                    "default_end_time",
                    models.TimeField(
                        default="17:00:00", help_text="Default work end time"
                    ),
                ),
                (
                    "break_duration_minutes",
                    models.PositiveIntegerField(
                        default=60, help_text="Break duration in minutes"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="technician_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Technician Profile",
                "verbose_name_plural": "Technician Profiles",
                "ordering": ["user__first_name", "user__last_name"],
            },
        ),
        migrations.CreateModel(
            name="Crew",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this crew is currently active"
                    ),
                ),
                (
                    "max_concurrent_jobs",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Maximum number of jobs this crew can work on simultaneously",
                    ),
                ),
                (
                    "contact_phone",
                    models.CharField(
                        blank=True, help_text="Crew contact phone number", max_length=20
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "leader",
                    models.ForeignKey(
                        blank=True,
                        help_text="Crew leader/foreman",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="led_crews",
                        to="technicians.technicianprofile",
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Technicians in this crew",
                        related_name="crews",
                        to="technicians.technicianprofile",
                    ),
                ),
                (
                    "primary_skill",
                    models.ForeignKey(
                        blank=True,
                        help_text="Primary skill/specialization of this crew",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="technicians.skill",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TimeOffRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "request_type",
                    models.CharField(
                        choices=[
                            ("vacation", "Vacation"),
                            ("sick", "Sick Leave"),
                            ("personal", "Personal Day"),
                            ("jury_duty", "Jury Duty"),
                            ("bereavement", "Bereavement"),
                            ("other", "Other"),
                        ],
                        help_text="Type of time-off request",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField(help_text="Start date of time off")),
                ("end_date", models.DateField(help_text="End date of time off")),
                (
                    "start_time",
                    models.TimeField(
                        blank=True,
                        help_text="Start time (for partial day requests)",
                        null=True,
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True,
                        help_text="End time (for partial day requests)",
                        null=True,
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        blank=True, help_text="Reason for the time-off request"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Approval"),
                            ("approved", "Approved"),
                            ("denied", "Denied"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Approval status of the request",
                        max_length=20,
                    ),
                ),
                (
                    "approval_notes",
                    models.TextField(blank=True, help_text="Notes from the approver"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who approved/denied this request",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="time_off_requests_approved",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        help_text="User who created this request (usually the technician)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="time_off_requests_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        help_text="Technician requesting time off",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_off_requests",
                        to="technicians.technicianprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Time-Off Request",
                "verbose_name_plural": "Time-Off Requests",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["technician", "status"],
                        name="technicians_technic_a878d9_idx",
                    ),
                    models.Index(
                        fields=["start_date", "end_date"],
                        name="technicians_start_d_603906_idx",
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="technicians_status_aafdd2_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TechnicianSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[
                            ("holiday", "Holiday"),
                            ("special_hours", "Special Hours"),
                            ("unavailable", "Unavailable"),
                            ("training", "Training"),
                        ],
                        help_text="Type of schedule override",
                        max_length=20,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title/description of the schedule override",
                        max_length=200,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(help_text="Start date of the override"),
                ),
                ("end_date", models.DateField(help_text="End date of the override")),
                (
                    "start_time",
                    models.TimeField(
                        blank=True,
                        help_text="Custom start time (for special hours)",
                        null=True,
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True,
                        help_text="Custom end time (for special hours)",
                        null=True,
                    ),
                ),
                (
                    "is_all_day",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this override applies to the entire day",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this schedule"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this schedule override",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="schedule_overrides_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        help_text="Technician this schedule applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedule_overrides",
                        to="technicians.technicianprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Technician Schedule Override",
                "verbose_name_plural": "Technician Schedule Overrides",
                "ordering": ["start_date", "technician"],
                "indexes": [
                    models.Index(
                        fields=["technician", "start_date", "end_date"],
                        name="technicians_technic_2d10c6_idx",
                    ),
                    models.Index(
                        fields=["schedule_type"], name="technicians_schedul_310d97_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Certification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "certification_number",
                    models.CharField(
                        blank=True,
                        help_text="Official certification number",
                        max_length=100,
                    ),
                ),
                ("issued_date", models.DateField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether certification has been verified",
                    ),
                ),
                (
                    "verification_document",
                    models.FileField(
                        blank=True,
                        help_text="Uploaded verification document",
                        null=True,
                        upload_to="certifications/",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certifications",
                        to="technicians.skill",
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certifications",
                        to="technicians.technicianprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-expiry_date", "skill__name"],
                "unique_together": {("technician", "skill")},
            },
        ),
    ]
