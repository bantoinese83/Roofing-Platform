# Generated by Django 4.2.24 on 2025-09-13 01:05

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("technicians", "0001_initial"),
        ("jobs", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Route",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("route_date", models.DateField(help_text="Date for this route")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planned",
                        help_text="Current status of the route",
                        max_length=20,
                    ),
                ),
                (
                    "optimization_type",
                    models.CharField(
                        choices=[
                            ("distance", "Minimize Distance"),
                            ("time", "Minimize Time"),
                            ("efficiency", "Maximize Efficiency"),
                        ],
                        default="time",
                        help_text="Type of optimization applied",
                        max_length=20,
                    ),
                ),
                (
                    "total_distance_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Total distance in kilometers",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "total_duration_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Total estimated duration in minutes",
                        null=True,
                    ),
                ),
                (
                    "estimated_fuel_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated fuel cost",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "start_address",
                    models.TextField(
                        blank=True,
                        help_text="Starting address (usually home base or first stop)",
                    ),
                ),
                (
                    "start_latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Starting latitude",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "start_longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Starting longitude",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "end_address",
                    models.TextField(
                        blank=True,
                        help_text="Ending address (usually home base or last stop)",
                    ),
                ),
                (
                    "end_latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Ending latitude",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "end_longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Ending longitude",
                        max_digits=9,
                        null=True,
                    ),
                ),
                (
                    "google_route_id",
                    models.CharField(
                        blank=True,
                        help_text="Google Maps route ID for tracking",
                        max_length=100,
                    ),
                ),
                (
                    "route_polyline",
                    models.TextField(
                        blank=True,
                        help_text="Encoded polyline for the route (Google Maps format)",
                    ),
                ),
                (
                    "avoid_tolls",
                    models.BooleanField(
                        default=False,
                        help_text="Avoid toll roads in route optimization",
                    ),
                ),
                (
                    "avoid_highways",
                    models.BooleanField(
                        default=False, help_text="Avoid highways in route optimization"
                    ),
                ),
                (
                    "vehicle_type",
                    models.CharField(
                        choices=[("car", "Car"), ("truck", "Truck"), ("van", "Van")],
                        default="truck",
                        help_text="Type of vehicle for route optimization",
                        max_length=20,
                    ),
                ),
                (
                    "optimized_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the route was last optimized",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this route",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_routes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        help_text="Technician assigned to this route",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes",
                        to="technicians.technicianprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route",
                "verbose_name_plural": "Routes",
                "ordering": ["-route_date", "technician"],
            },
        ),
        migrations.CreateModel(
            name="RouteSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "google_maps_api_key",
                    models.CharField(
                        blank=True,
                        help_text="Google Maps API key for route optimization",
                        max_length=100,
                    ),
                ),
                (
                    "default_optimization_type",
                    models.CharField(
                        choices=[
                            ("distance", "Minimize Distance"),
                            ("time", "Minimize Time"),
                            ("efficiency", "Maximize Efficiency"),
                        ],
                        default="time",
                        help_text="Default optimization type",
                        max_length=20,
                    ),
                ),
                (
                    "default_vehicle_type",
                    models.CharField(
                        choices=[("car", "Car"), ("truck", "Truck"), ("van", "Van")],
                        default="truck",
                        help_text="Default vehicle type",
                        max_length=20,
                    ),
                ),
                (
                    "default_avoid_tolls",
                    models.BooleanField(
                        default=False, help_text="Default setting for avoiding tolls"
                    ),
                ),
                (
                    "default_avoid_highways",
                    models.BooleanField(
                        default=False, help_text="Default setting for avoiding highways"
                    ),
                ),
                (
                    "max_stops_per_route",
                    models.PositiveIntegerField(
                        default=8, help_text="Maximum number of stops per route"
                    ),
                ),
                (
                    "default_break_duration_minutes",
                    models.PositiveIntegerField(
                        default=30, help_text="Default break duration between jobs"
                    ),
                ),
                (
                    "fuel_efficiency_kmpl",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("8.0"),
                        help_text="Fuel efficiency in km per liter",
                        max_digits=4,
                    ),
                ),
                (
                    "fuel_cost_per_liter",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.50"),
                        help_text="Fuel cost per liter in dollars",
                        max_digits=5,
                    ),
                ),
                (
                    "average_job_duration_minutes",
                    models.PositiveIntegerField(
                        default=120, help_text="Average job duration in minutes"
                    ),
                ),
                (
                    "buffer_time_percentage",
                    models.PositiveIntegerField(
                        default=20,
                        help_text="Buffer time percentage for unexpected delays",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Route Settings",
                "verbose_name_plural": "Route Settings",
            },
        ),
        migrations.CreateModel(
            name="RouteWaypoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stop_order",
                    models.PositiveIntegerField(
                        help_text="Order of this stop in the route (1-based)"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("skipped", "Skipped"),
                        ],
                        default="pending",
                        help_text="Current status of this waypoint",
                        max_length=20,
                    ),
                ),
                ("address", models.TextField(help_text="Job address")),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6, help_text="Latitude coordinate", max_digits=9
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6, help_text="Longitude coordinate", max_digits=9
                    ),
                ),
                (
                    "estimated_arrival_time",
                    models.TimeField(
                        blank=True, help_text="Estimated arrival time", null=True
                    ),
                ),
                (
                    "estimated_departure_time",
                    models.TimeField(
                        blank=True, help_text="Estimated departure time", null=True
                    ),
                ),
                (
                    "estimated_duration_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Estimated time to complete job at this stop",
                        null=True,
                    ),
                ),
                (
                    "actual_arrival_time",
                    models.DateTimeField(
                        blank=True, help_text="Actual arrival time", null=True
                    ),
                ),
                (
                    "actual_departure_time",
                    models.DateTimeField(
                        blank=True, help_text="Actual departure time", null=True
                    ),
                ),
                (
                    "actual_duration_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Actual time spent at this stop",
                        null=True,
                    ),
                ),
                (
                    "distance_from_previous_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Distance from previous waypoint in kilometers",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "travel_time_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Estimated travel time from previous stop",
                        null=True,
                    ),
                ),
                (
                    "arrival_notes",
                    models.TextField(blank=True, help_text="Notes taken upon arrival"),
                ),
                (
                    "departure_notes",
                    models.TextField(
                        blank=True, help_text="Notes taken upon departure"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "job",
                    models.ForeignKey(
                        help_text="Job associated with this waypoint",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="route_waypoints",
                        to="jobs.job",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        help_text="Route this waypoint belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="waypoints",
                        to="routes.route",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route Waypoint",
                "verbose_name_plural": "Route Waypoints",
                "ordering": ["route", "stop_order"],
                "indexes": [
                    models.Index(
                        fields=["route", "stop_order"],
                        name="routes_rout_route_i_9210bf_idx",
                    ),
                    models.Index(
                        fields=["job", "status"], name="routes_rout_job_id_bef294_idx"
                    ),
                    models.Index(
                        fields=["status", "estimated_arrival_time"],
                        name="routes_rout_status_f54f67_idx",
                    ),
                ],
                "unique_together": {("route", "job")},
            },
        ),
        migrations.AddIndex(
            model_name="route",
            index=models.Index(
                fields=["technician", "route_date"],
                name="routes_rout_technic_c0fa21_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="route",
            index=models.Index(
                fields=["route_date", "status"], name="routes_rout_route_d_2486cb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="route",
            index=models.Index(
                fields=["status", "created_at"], name="routes_rout_status_1a226e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="route",
            unique_together={("technician", "route_date")},
        ),
    ]
