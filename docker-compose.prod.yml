version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Django Backend (Production with Gunicorn)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=roof_platform.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn roof_platform.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4
      "

  # Next.js Frontend (Production build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_ENVIRONMENT=production
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - backend
      - frontend

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=roof_platform.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    command: celery -A roof_platform worker --loglevel=info

  # Celery Beat (Scheduled Tasks)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=roof_platform.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    command: celery -A roof_platform beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

volumes:
  postgres_data:
  redis_data:
  static_files:
  media_files:
